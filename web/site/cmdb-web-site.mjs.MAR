import express from 'express'

const app = express.Router()
const ROOT = '/cmdb/groups'
const HOME = '/cmdb/'

class View {
    constructor(name, data) {
        this.name = name
        this.data = data
    }
}

export default function(services) {   

   // app.use('/cmdb/public/', express.static(`${__dirname}/web/site/public/`))
    app.get('/', getRoot)
    app.get('/cmdb/', getHome)
    app.get('cmdb/groups/new/', getNewGroupForm)
    app.get('/cmdb/groups', getGroups)
    app.get('/cmdb/groups/:id', getGroup)
    app.post('/cmdb/groups', createGroup)
    app.post('/cmdb/groups/:id/delete', deleteGroup)
    app.post('/cmdb/groups/:id/update', updateGroup)
    app.get('/cmdb/groups/:id/update', getUpdateGroupForm)

    // TODO -----------------------------------------------
    app.get('/cmdb/search', getMovies)
    app.get('/cmdb/search/:idMovie', getMovie)
    app.post('/cmdb/groups/:id/:idMovie', addMovie)

    return app

    async function getRoot(req, rsp) {
        console.log('HOME redirect')
        rsp.redirect(HOME)
    }

    async function getHome (req, rsp) {
        let user = {
            id: undefined,
            name: undefined,
            token: undefined
        }
        if (req.user != undefined){
            user.id = req.user.id
            user.name = req.user.name
            user.token = req.user.token
        }
        
        rsp.render('home', {user: user})
    }

    async function getGroups(req, rsp) {
        console.log(req.session)
        const groups = await services.getGroups(req.session.token, req.query.q, req.query.skip, req.query.limit)
        return new View('groups', { title: 'My playlists', groups: groups })
    }

    async function getGroup(req, rsp) {
        const groupId = req.params.id
        const group = await services.getGroup(req.token, groupId)
        return new View('group', group)
    }

    async function getNewGroupForm(req, rsp) {
        rsp.render('newGroup')
    }

    async function deleteGroup(req, rsp) {
        const groupId = req.params.id
        const group = await services.deleteGroup(req.token, groupId)
        rsp.redirect(ROOT)
    }

    async function createGroup(req, rsp) {
        console.log(req)
        try {
            const newGroup = await services.createGroup(req.session.user.token, 'test')
            //const newGroup = await services.createGroup(req.token, req.body)
            rsp.redirect(`${ROOT}/${newGroup.id}`)
        } catch (e) {
            if (e.code == 1) {
                return new View('newGroup', req.body)
            }
            throw e
        }        
    }

    async function getUpdateGroupForm(req, rsp) {

    }

    async function updateGroup(req, rsp) {
        // TODO
    }

    async function getMovies(req, rsp) {
        // TODO
    }

    async function getMovie(req, rsp) {
        // TODO
    }

    async function deleteMovie(req, rsp) {
        // TODO
    }

    async function createUser(req, rsp) {
        const name = req.body.username
        const token = req.session.token
        const user = await services.createWebUser(name, token)
        console.log(`createUserInternal: ${user.name}`)
        req.user = user
        req.session[user] = user
        getHome(req, rsp)
    }

    async function addMovie(req, rsp) {
        // TODO
    }

     // Auxiliary functions ----------------------------------------------------------------
     function handleRequest(handler) {
        
        return async function (req, rsp) {
            //verifyAuthenticated(req, rsp, next)
            try {
                let view = await handler(req, rsp)
                if (view) {
                    rsp.render(view.name, view.data)
                }                
            } catch (e) {
                const response = toHttpResponse(e)
                rsp.status(response.status).json({ error: response.body })
                console.log(e)
            }
        }
    }
}